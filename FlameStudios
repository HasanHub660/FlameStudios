-- Place this LocalScript inside a ScreenGui under StarterGui -- It includes: Speed, Jump, Fly with mobile controls, dark/light theme, draggable toggle, slide-in panel

local Players = game:GetService("Players") local UserInputService = game:GetService("UserInputService") local TweenService = game:GetService("TweenService") local RunService = game:GetService("RunService")

local player = Players.LocalPlayer local character = player.Character or player.CharacterAdded:Wait() local humanoid = character:WaitForChild("Humanoid")

-- Theme setup local Themes = { Dark = { Background = Color3.fromRGB(30, 30, 30), Text = Color3.new(1, 1, 1), Button = Color3.fromRGB(60, 60, 60) }, Light = { Background = Color3.fromRGB(240, 240, 240), Text = Color3.new(0, 0, 0), Button = Color3.fromRGB(200, 200, 200) } } local currentTheme = "Dark"

-- GUI Setup local gui = Instance.new("ScreenGui") gui.Name = "FancyControllerUI" gui.ResetOnSpawn = false gui.IgnoreGuiInset = true gui.Parent = player:WaitForChild("PlayerGui")

local panel = Instance.new("Frame") panel.Size = UDim2.new(0, 260, 0, 300) panel.Position = UDim2.new(0, -270, 0.4, -150) panel.BackgroundColor3 = Themes[currentTheme].Background panel.BorderSizePixel = 0 panel.ClipsDescendants = true panel.Parent = gui

local uiCorner = Instance.new("UICorner", panel) uiCorner.CornerRadius = UDim.new(0, 12)

local layout = Instance.new("UIListLayout") layout.Padding = UDim.new(0, 6) layout.FillDirection = Enum.FillDirection.Vertical layout.HorizontalAlignment = Enum.HorizontalAlignment.Center layout.VerticalAlignment = Enum.VerticalAlignment.Top layout.SortOrder = Enum.SortOrder.LayoutOrder layout.Parent = panel

local function createButton(text, callback) local btn = Instance.new("TextButton") btn.Size = UDim2.new(0.9, 0, 0, 36) btn.BackgroundColor3 = Themes[currentTheme].Button btn.TextColor3 = Themes[currentTheme].Text btn.Font = Enum.Font.Gotham btn.TextSize = 16 btn.Text = text btn.AutoButtonColor = true btn.Parent = panel Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 8) btn.MouseButton1Click:Connect(callback) return btn end

-- Speed/Jump Buttons createButton("Speed +5", function() humanoid.WalkSpeed = humanoid.WalkSpeed + 5 end) createButton("Speed -5", function() humanoid.WalkSpeed = math.max(0, humanoid.WalkSpeed - 5) end) createButton("Jump +10", function() humanoid.JumpPower = humanoid.JumpPower + 10 end) createButton("Jump -10", function() humanoid.JumpPower = math.max(10, humanoid.JumpPower - 10) end) createButton("Reset", function() humanoid.WalkSpeed = 16 humanoid.JumpPower = 50 end)

-- Fly System local flying = false local flySpeed = 50 local flyVector = Vector3.zero local flyGyro, flyVelocity

local function startFly() local root = character:WaitForChild("HumanoidRootPart") flying = true

flyGyro = Instance.new("BodyGyro")
flyGyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
flyGyro.CFrame = workspace.CurrentCamera.CFrame
flyGyro.Parent = root

flyVelocity = Instance.new("BodyVelocity")
flyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
flyVelocity.Velocity = Vector3.zero
flyVelocity.Parent = root

RunService:BindToRenderStep("Flying", Enum.RenderPriority.Input.Value, function()
    flyGyro.CFrame = workspace.CurrentCamera.CFrame
    flyVelocity.Velocity = flyVector * flySpeed
end)

end

local function stopFly() flying = false RunService:UnbindFromRenderStep("Flying") if flyGyro then flyGyro:Destroy() end if flyVelocity then flyVelocity:Destroy() end end

createButton("Toggle Fly", function() if flying then stopFly() else startFly() end end) createButton("Fly Speed +", function() flySpeed = flySpeed + 10 end) createButton("Fly Speed -", function() flySpeed = math.max(10, flySpeed - 10) end)

-- Mobile Fly Controls local flyControlFrame = Instance.new("Frame") flyControlFrame.Size = UDim2.new(0, 160, 0, 160) flyControlFrame.Position = UDim2.new(1, -170, 1, -170) flyControlFrame.BackgroundTransparency = 1 flyControlFrame.Parent = gui

local directions = { {Name = "Up", Dir = Vector3.new(0, 1, 0)}, {Name = "Down", Dir = Vector3.new(0, -1, 0)}, {Name = "Forward", Dir = Vector3.new(0, 0, -1)}, {Name = "Back", Dir = Vector3.new(0, 0, 1)}, {Name = "Left", Dir = Vector3.new(-1, 0, 0)}, {Name = "Right", Dir = Vector3.new(1, 0, 0)} }

for _, d in ipairs(directions) do local b = Instance.new("TextButton") b.Size = UDim2.new(0, 50, 0, 30) b.Position = UDim2.new(0, math.random(0, 110), 0, math.random(0, 110)) b.Text = d.Name b.BackgroundColor3 = Color3.fromRGB(100, 100, 100) b.TextColor3 = Color3.new(1, 1, 1) b.Font = Enum.Font.Gotham b.TextSize = 14 b.Parent = flyControlFrame b.MouseButton1Down:Connect(function() flyVector = d.Dir end) b.MouseButton1Up:Connect(function() flyVector = Vector3.zero end) end

-- Theme Toggle createButton("Toggle Theme", function() currentTheme = currentTheme == "Dark" and "Light" or "Dark" panel.BackgroundColor3 = Themes[currentTheme].Background for _, child in pairs(panel:GetChildren()) do if child:IsA("TextButton") then child.BackgroundColor3 = Themes[currentTheme].Button child.TextColor3 = Themes[currentTheme].Text end end end)

-- Slide Toggle Button local toggle = Instance.new("TextButton") toggle.Size = UDim2.new(0, 50, 0, 50) toggle.Position = UDim2.new(0, 10, 0.5, -25) toggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70) toggle.Text = "â‰¡" toggle.Font = Enum.Font.GothamBold toggle.TextColor3 = Color3.new(1, 1, 1) toggle.TextSize = 26 toggle.Parent = gui Instance.new("UICorner", toggle).CornerRadius = UDim.new(1, 0)

local open = false toggle.MouseButton1Click:Connect(function() open = not open TweenService:Create(panel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = open and UDim2.new(0, 10, 0.4, -150) or UDim2.new(0, -270, 0.4, -150) }):Play() end)

-- Draggable toggle button local dragging = false local dragInput, dragStart, startPos

toggle.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging = true dragStart = input.Position startPos = toggle.Position input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false end end) end end)

UserInputService.InputChanged:Connect(function(input) if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then local delta = input.Position - dragStart toggle.Position = UDim2.new(0, startPos.X.Offset + delta.X, 0, startPos.Y.Offset + delta.Y) end end)

